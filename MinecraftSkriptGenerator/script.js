const $ = id => document.getElementById(id);

function showProgress(text = 'Processing...') {
    const overlay = document.createElement('div');
    overlay.className = 'progress-overlay';
    overlay.id = 'progressOverlay';
    overlay.innerHTML = `
        <div class="progress-container">
            <div class="progress-text" id="progressText">${text}</div>
            <div class="progress-bar-wrapper">
                <div class="progress-bar-fill" id="progressBarFill"></div>
            </div>
        </div>
    `;
    document.body.appendChild(overlay);
}

function updateProgress(percent, text) {
    const fill = document.getElementById('progressBarFill');
    const textEl = document.getElementById('progressText');
    if (fill) fill.style.width = percent + '%';
    if (textEl && text) textEl.textContent = text;
}

function hideProgress() {
    const overlay = document.getElementById('progressOverlay');
    if (overlay) overlay.remove();
}

function showAlert(message, type = 'success') {
    const icons = { success: '✅', error: '❌', info: 'ℹ️' };
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.innerHTML = `
        <span>${icons[type] || ''}</span>
        <span>${message}</span>
        <span class="close-alert" onclick="this.parentElement.remove()">×</span>
    `;
    $('alertContainer').appendChild(alertDiv);
    setTimeout(() => alertDiv.remove(), 5000);
}

// Tab switching
document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', () => {
        const tabName = tab.getAttribute('data-tab');
        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        document.querySelector(`[data-content="${tabName}"]`).classList.add('active');
    });
});

// Elements
const inputCommands = $('inputCommands');
const commandName = $('commandName');
const outputSkript = $('outputSkript');
const linesCount = $('linesCount');
const charCount = $('charCount');
const includePerm = $('includePerm');
const consoleExec = $('consoleExec');
const successMsg = $('successMsg');
const autoUpdate = $('autoUpdate');
const aliases = $('aliases');
const cooldown = $('cooldown');
const addDelay = $('addDelay');
const delayTime = $('delayTime');
const loopCommands = $('loopCommands');
const loopCount = $('loopCount');
const replaceCoords = $('replaceCoords');
const messageType = $('messageType');
const playSound = $('playSound');
const soundName = $('soundName');
const errorMsg = $('errorMsg');
const indentType = $('indentType');
const commentStyle = $('commentStyle');
const addHeader = $('addHeader');

// Update counters
function updateCounts() {
    const lines = inputCommands.value.split('\n').filter(l => l.trim());
    linesCount.textContent = lines.length;
    charCount.textContent = inputCommands.value.length;
}

// Generate Skript with advanced features
function generateSkriptString() {
    const name = commandName.value.trim() || 'mycommand';
    const lines = inputCommands.value.split('\n').map(l => l.trim()).filter(l => l);
    if (lines.length === 0) return '';

    const indent = indentType.value === 'tabs' ? '\t' : '    ';
    const commentEnabled = commentStyle.value !== 'none';
    const descriptive = commentStyle.value === 'descriptive';

    let out = '';

    // Header comment
    if (addHeader.checked) {
        out += `# Generated by Minecraft Skript Generator\n`;
        out += `# Generated at: https://createminecraftserver.hira.im/MinecraftSkriptGenerator/\n`;
        out += `# Command: /${name}\n`;
        out += `# Date: ${new Date().toLocaleDateString()}\n\n`;
    }

    // Command definition
    out += `command /${name}`;

    // Aliases
    if (aliases.value.trim()) {
        const aliasList = aliases.value.split(',').map(a => a.trim()).filter(a => a);
        if (aliasList.length > 0) {
            out += ` <alias:/${aliasList.join('/, /')}>`;
        }
    }
    out += `:\n`;

    // Permission
    if (includePerm.checked) {
        out += `${indent}permission: ${name}.give\n`;
        out += `${indent}permission message: ${errorMsg.value}\n`;
    }

    // Cooldown
    if (cooldown.value && parseInt(cooldown.value) > 0) {
        out += `${indent}cooldown: ${cooldown.value} seconds\n`;
        out += `${indent}cooldown message: &cPlease wait %remaining time% before using this again!\n`;
    }

    out += `${indent}trigger:\n`;

    // Add coordinate variables
    if (commentEnabled && descriptive) {
        out += `${indent}${indent}# Store player coordinates\n`;
    }
    out += `${indent}${indent}set {_x} to x-coordinate of player\n`;
    out += `${indent}${indent}set {_y} to y-coordinate of player\n`;
    out += `${indent}${indent}set {_z} to z-coordinate of player\n`;
    out += `${indent}${indent}\n`;

    // Process commands
    let commandBlock = '';
    const loopTimes = loopCommands.checked ? parseInt(loopCount.value) || 1 : 1;

    for (let loop = 0; loop < loopTimes; loop++) {
        if (loopCommands.checked && commentEnabled) {
            commandBlock += `${indent}${indent}# Loop iteration ${loop + 1}\n`;
        }

        lines.forEach((ln, i) => {
            let processedLine = ln;

            // Replace coordinates if enabled
            if (replaceCoords.checked) {
                processedLine = processedLine.replace(/~ ~ ~/g, '%player\'s location%');
            } else {
                // Replace ~ ~1 ~ with coordinate variables for summon item commands
                if (processedLine.includes('summon item')) {
                    processedLine = processedLine.replace(/~ ~1 ~/g, '%{_x}% %{_y}% %{_z}%');
                    processedLine = processedLine.replace(/~ ~ ~/g, '%{_x}% %{_y}% %{_z}%');
                }
            }

            // Add command comment
            if (commentEnabled) {
                if (descriptive) {
                    commandBlock += `${indent}${indent}# Command ${i + 1}\n`;
                }
            }

            // Execute command
            if (consoleExec.checked) {
                commandBlock += `${indent}${indent}make console execute command "${processedLine.replace(/"/g, "'")}"\n`;
            } else {
                commandBlock += `${indent}${indent}execute console command "${processedLine.replace(/"/g, "'")}"\n`;
            }

            // Add delay
            if (addDelay.checked && (i < lines.length - 1 || loop < loopTimes - 1)) {
                const delay = parseFloat(delayTime.value) || 0.5;
                commandBlock += `${indent}${indent}wait ${delay} seconds\n`;
            }
        });
    }

    out += commandBlock;

    // Success message
    if (successMsg.value.trim()) {
        if (commentEnabled && descriptive) {
            out += `${indent}${indent}# Send success notification\n`;
        }

        const msgType = messageType.value;
        if (msgType === 'send') {
            out += `${indent}${indent}send "${successMsg.value}" to player\n`;
        } else if (msgType === 'actionbar') {
            out += `${indent}${indent}send action bar "${successMsg.value}" to player\n`;
        } else if (msgType === 'title') {
            out += `${indent}${indent}send title "${successMsg.value}" to player\n`;
        }
    }

    // Play sound
    if (playSound.checked && soundName.value.trim()) {
        if (commentEnabled && descriptive) {
            out += `${indent}${indent}# Play success sound effect\n`;
        }
        out += `${indent}${indent}play sound "${soundName.value}" to player\n`;
    }

    return out;
}

function triggerUpdate() {
    try {
        const s = generateSkriptString();
        outputSkript.value = s || '## No valid input detected.';
        const statusEl = $('genStatus');
        if (statusEl) {
            statusEl.textContent = s ? 'Preview updated' : '';
        }
    } catch (e) {
        showAlert('Error: ' + e.message, 'error');
    }
}

// Events
inputCommands.addEventListener('input', () => { updateCounts(); if (autoUpdate.checked) triggerUpdate(); });
commandName.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
aliases.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
cooldown.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
includePerm.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
consoleExec.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
addDelay.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
delayTime.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
loopCommands.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
loopCount.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
replaceCoords.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
successMsg.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
messageType.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
playSound.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
soundName.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
errorMsg.addEventListener('input', () => { if (autoUpdate.checked) triggerUpdate(); });
indentType.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
commentStyle.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });
addHeader.addEventListener('change', () => { if (autoUpdate.checked) triggerUpdate(); });

$('generateBtn').addEventListener('click', () => { triggerUpdate(); showAlert('Skript generated!', 'success'); });

$('copyBtn').addEventListener('click', () => {
    navigator.clipboard.writeText(outputSkript.value);
    showAlert('Skript copied to clipboard!', 'success');
});

$('saveBtn').addEventListener('click', async () => {
    showProgress('Preparing file...');
    updateProgress(30, 'Generating content...');
    
    // Simulate processing time for large files
    await new Promise(resolve => setTimeout(resolve, 100));
    updateProgress(60, 'Creating download...');
    
    const blob = new Blob([outputSkript.value], { type: 'text/plain' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = (commandName.value || 'mycommand') + '.sk';
    
    updateProgress(90, 'Finalizing...');
    await new Promise(resolve => setTimeout(resolve, 100));
    
    a.click();
    URL.revokeObjectURL(a.href);
    
    updateProgress(100, 'Complete!');
    await new Promise(resolve => setTimeout(resolve, 300));
    hideProgress();
    showAlert('File downloaded!', 'success');
});

$('zipBtn').addEventListener('click', async () => {
    if (typeof JSZip === 'undefined') {
        showAlert('JSZip library not loaded yet. Please try again.', 'error');
        return;
    }
    
    showProgress('Preparing ZIP archive...');
    updateProgress(20, 'Initializing ZIP...');
    
    const zip = new JSZip();
    const fileName = (commandName.value || 'mycommand') + '.sk';
    
    updateProgress(40, 'Adding script file...');
    await new Promise(resolve => setTimeout(resolve, 100));
    zip.file(fileName, outputSkript.value);

    updateProgress(60, 'Adding documentation...');
    await new Promise(resolve => setTimeout(resolve, 100));
    // Add a readme
    zip.file('README.txt', `Minecraft Skript Generator - http://Go.HSinghHira.me/MSG\n\nGenerated: ${new Date().toLocaleString()}\nCommand: /${commandName.value || 'mycommand'}\n\nInstallation:\n1. Place the .sk file in your server's plugins/Skript/scripts/ folder\n2. Run /sk reload ${fileName}\n3. Use the command in-game!\n`);

    updateProgress(80, 'Compressing files...');
    const content = await zip.generateAsync({ type: 'blob' });
    
    updateProgress(90, 'Creating download...');
    const a = document.createElement('a');
    a.href = URL.createObjectURL(content);
    a.download = (commandName.value || 'mycommand') + '-skript.zip';
    a.click();
    URL.revokeObjectURL(a.href);
    
    updateProgress(100, 'Complete!');
    await new Promise(resolve => setTimeout(resolve, 300));
    hideProgress();
    showAlert('ZIP file downloaded!', 'success');
});

// Template system
const templates = {
    armor: {
        name: 'armor',
        commands: `give @p minecraft:diamond_helmet{Enchantments:[{id:"protection",lvl:4}]}
give @p minecraft:diamond_chestplate{Enchantments:[{id:"protection",lvl:4}]}
give @p minecraft:diamond_leggings{Enchantments:[{id:"protection",lvl:4}]}
give @p minecraft:diamond_boots{Enchantments:[{id:"protection",lvl:4}]}`,
        message: '&aFull diamond armor set given!',
        sound: 'entity.player.levelup'
    },
    weapons: {
        name: 'weapons',
        commands: `give @p minecraft:diamond_sword{Enchantments:[{id:"sharpness",lvl:5},{id:"unbreaking",lvl:3}]}
give @p minecraft:bow{Enchantments:[{id:"power",lvl:5},{id:"infinity",lvl:1}]}
give @p minecraft:arrow 64`,
        message: '&aWeapons kit received!',
        sound: 'item.armor.equip_diamond'
    },
    items: {
        name: 'items',
        commands: `give @p minecraft:diamond 32
give @p minecraft:emerald 16
give @p minecraft:gold_ingot 64
give @p minecraft:ender_pearl 16`,
        message: '&aValuable items received!',
        sound: 'entity.item.pickup'
    },
    effects: {
        name: 'effects',
        commands: `effect give @p minecraft:speed 60 2
effect give @p minecraft:strength 60 2
effect give @p minecraft:jump_boost 60 2
effect give @p minecraft:regeneration 30 2`,
        message: '&aBuffs applied!',
        sound: 'entity.player.levelup'
    }
};

document.querySelectorAll('[data-tpl]').forEach(btn => {
    btn.addEventListener('click', () => {
        const type = btn.getAttribute('data-tpl');
        const template = templates[type];
        if (template) {
            commandName.value = template.name;
            inputCommands.value = template.commands;
            successMsg.value = template.message;
            soundName.value = template.sound;
            playSound.checked = true;
            triggerUpdate();
            showAlert(`Template "${type}" loaded!`, 'success');
        }
    });
});

// Drag and drop file support
const dropArea = $('dropArea');
const importFile = $('importFile');

dropArea.addEventListener('click', () => importFile.click());

dropArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropArea.style.borderColor = '#D3DAD9';
    dropArea.style.background = 'rgba(211, 218, 217, 0.05)';
});

dropArea.addEventListener('dragleave', () => {
    dropArea.style.borderColor = '';
    dropArea.style.background = '';
});

dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    dropArea.style.borderColor = '';
    dropArea.style.background = '';
    const file = e.dataTransfer.files[0];
    if (file) loadFile(file);
});

importFile.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) loadFile(file);
});

function loadFile(file) {
    const reader = new FileReader();
    reader.onload = (e) => {
        inputCommands.value = e.target.result;
        updateCounts();
        if (autoUpdate.checked) triggerUpdate();
        showAlert(`File "${file.name}" loaded successfully!`, 'success');
    };
    reader.onerror = () => {
        showAlert('Error reading file!', 'error');
    };
    reader.readAsText(file);
}

// Initialize
updateCounts();
triggerUpdate();